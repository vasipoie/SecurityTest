<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
<!-- spring폴더 안에서-new-config검색-spring bean configuration file -->

	<!-- 6. 사용자 정의 접근 거부 처리자 추가 -->
	<bean id="customAccessDenied" class="kr.or.ddit.security.CustomAccessDeniedHandler"/>
	
	<!-- 8. 로그인 성공 처리 -->
	<bean id="customLoginSuccess" class="kr.or.ddit.security.CustomLoginSuccessHandler"/>
	
	<!-- 10. JDBC 이용한 인증/인가 처리 : 비밀번호 암호화 처리기를 사용하지 않을 때 -->
<!-- 	<bean id="customPasswordEncoder" class="kr.or.ddit.security.CustomNoOpPasswordEncoder"/> -->

	<!-- 11. 사용자 테이블 이용한 인증/인가 처리 -->
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
	
	<!-- 12. UserDetailsService 재정의 -->
	<bean id="customUserDetailsService" class="kr.or.ddit.security.CustomUserDetailsService"></bean>

	<security:http>
	
		<!-- 3. 접근 제한 설정 -->
<!-- 		<security:intercept-url pattern="/board/list" access="permitAll"/> -->
<!-- 		<security:intercept-url pattern="/board/register" access="hasRole('ROLE_MEMBER')"/> -->
<!-- 		<security:intercept-url pattern="/notice/list" access="permitAll"/> -->
<!-- 		<security:intercept-url pattern="/notice/register" access="hasRole('ROLE_ADMIN')"/> -->
		<!-- 3. 접근 제한 설정  끝 -->
	
		<!-- 폼 기반 인증 기능을 사용한다. -->
<!-- 		<security:form-login/> -->

		<!-- 7. 사용자 정의 로그인 페이지 -->
<!-- 		<security:form-login login-page="/login"/> -->
		
		<!-- 8. 로그인 성공 처리 : 로그인 성공 후 처리를 담당하는 처리자로 지정한다. -->
		<security:form-login login-page="/login" authentication-success-handler-ref="customLoginSuccess"/>
		
		<!-- 접근 거부 처리자의 URI를 지정 -->
<!-- 		<security:access-denied-handler error-page="/accessError"/> -->

		<!-- 6. 사용자 정의 접근 거부 처리자 -->
		<security:access-denied-handler ref="customAccessDenied"/>
		
		<!-- 
			14. 자동 로그인 적용 
			- 데이터 소스를 지정하고 테이블을 이용해서 기존 로그인 정보를 기록
			- 쿠키의 유효시간을 지정한다. (604800 : 7일)
		-->
		<security:remember-me data-source-ref="dataSource" token-validity-seconds="604800"/>
		
		<!-- 
			로그아웃 처리를 위한 URI를 지정하고, 로그아웃 후에 세션을 무효화한다.
			logout-url : 시큐리티에서 제공하는 default 로그아웃 처리 URI는 '/logout'
			로그아웃이 정상적으로 이루어졌다면 /login 로그인 페이지로 이동한다.
			/login?logout >> 로그인 페이지에서는 logout 정보에 logout이 메세지로 나타난다
		 -->
		<security:logout logout-url="/logout" invalidate-session="true"
			delete-cookies="remember-me, JSESSION_ID"/>
	</security:http>
	
	<security:authentication-manager>
		<!-- 저장된 아이디와 패스워드로 로그인이 가능하도록 설정한다. -->
		<security:authentication-provider user-service-ref="customUserDetailsService">
<!-- 			<security:user-service> -->
<!-- 				<security:user name="member" password="{noop}1234" authorities="ROLE_MEMBER"/> -->
<!-- 				<security:user name="admin" password="{noop}1234" authorities="ROLE_MEMBER, ROLE_ADMIN"/> -->
<!-- 			</security:user-service> -->

			<!-- 10. JDBC 이용한 인증/인가 처리 : 암호화를 사용하지 않을 때 -->
<!-- 			<security:jdbc-user-service data-source-ref="dataSource"/> -->
<!-- 			<security:password-encoder ref="customPasswordEncoder"/> -->

			<!-- 11. 사용자가 직접 만든 테이블 구조의 인증/인가 처리 : 암호화 설정 -->
<!-- 			<security:jdbc-user-service data-source-ref="dataSource"  -->
<!-- 				users-by-username-query="select user_id, user_pw, enabled from member where user_id = ?" -->
<!-- 				authorities-by-username-query="select m.user_id, ma.auth from member_auth ma, member m where ma.user_no = m.user_no and m.user_id = ?"/> -->
			<security:password-encoder ref="bcryptPasswordEncoder"/>
		</security:authentication-provider>
	</security:authentication-manager>

</beans>
